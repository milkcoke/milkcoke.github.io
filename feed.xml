<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://milkcoke.github.io/</id><title>Falcon Database</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2023-12-02T11:27:00+09:00</updated> <author> <name>M_Falcon</name> <uri>https://milkcoke.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://milkcoke.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://milkcoke.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 M_Falcon </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Batch command in redis</title><link href="https://milkcoke.github.io/posts/Batch_Command/" rel="alternate" type="text/html" title="Batch command in redis" /><published>2023-12-02T00:00:00+09:00</published> <updated>2023-12-02T00:00:00+09:00</updated> <id>https://milkcoke.github.io/posts/Batch_Command/</id> <content src="https://milkcoke.github.io/posts/Batch_Command/" /> <author> <name>M_Falcon</name> </author> <category term="Redis" /> <summary> why to use batch? When we have to send a lot of command to redis Redis server have to process commands and replies about them. In request - response mechanism, there’s also ‘Round Trip Time’. Round Trip Time (RTT) Why RTT makes process slow? internet hops If client and server communication using internet protocol There’s many hops between them. According to region, routing, many differen... </summary> </entry> <entry><title>Lock in redis</title><link href="https://milkcoke.github.io/posts/Lock/" rel="alternate" type="text/html" title="Lock in redis" /><published>2023-09-15T00:00:00+09:00</published> <updated>2023-09-15T00:00:00+09:00</updated> <id>https://milkcoke.github.io/posts/Lock/</id> <content src="https://milkcoke.github.io/posts/Lock/" /> <author> <name>M_Falcon</name> </author> <category term="Redis" /> <summary> Locking we could use lock for overcoming optimistic lock solution Example of locking solution Bid system example refer previous post </summary> </entry> <entry><title>Concurrency in redis</title><link href="https://milkcoke.github.io/posts/Concurrency/" rel="alternate" type="text/html" title="Concurrency in redis" /><published>2023-09-12T00:00:00+09:00</published> <updated>2023-09-15T10:13:55+09:00</updated> <id>https://milkcoke.github.io/posts/Concurrency/</id> <content src="https://milkcoke.github.io/posts/Concurrency/" /> <author> <name>M_Falcon</name> </author> <category term="Redis" /> <summary> In many cases, concurrency could be ignored. It depends on your business requirement. Problem Race condition depends on sequence of commands. Result differ according to it. Why this happened? There’s gap between read and update. Solution (1) Use atomic command ex)HSETNX, HINCRBY It removes gap between read and command (2) Use transaction Redis transaction using MULTI and WATCH keyword... </summary> </entry> <entry><title>List of redis</title><link href="https://milkcoke.github.io/posts/List/" rel="alternate" type="text/html" title="List of redis" /><published>2023-09-08T00:00:00+09:00</published> <updated>2023-09-08T00:00:00+09:00</updated> <id>https://milkcoke.github.io/posts/List/</id> <content src="https://milkcoke.github.io/posts/List/" /> <author> <name>M_Falcon</name> </author> <category term="Redis" /> <summary> When to use Append only or prepend only data Time series data ex) temperature readings, stock values Non-stop overtime! Need to only fetch last or first element is reuiqred only. But this requirement is also implemented in sorted set. So use sorted set instead of list Data is organized by insertion order or time order Don’t use You need to apply some filtering criteria Dat... </summary> </entry> <entry><title>HyperLogLog</title><link href="https://milkcoke.github.io/posts/Hyper_loglog/" rel="alternate" type="text/html" title="HyperLogLog" /><published>2023-09-07T00:00:00+09:00</published> <updated>2023-09-08T08:37:57+09:00</updated> <id>https://milkcoke.github.io/posts/Hyper_loglog/</id> <content src="https://milkcoke.github.io/posts/Hyper_loglog/" /> <author> <name>M_Falcon</name> </author> <category term="Redis" /> <summary> HyperLogLog HyperLogLog is an algorithm for the count distinct problem. Redis provides HyperLogLog algorithm string data It only uses 12 KB. When to use? Guarantee approximate uniqueness when handle large dataset using small memory How to use? PFADD Example -- It's like a set, doesn't actually store true value PFADD &amp;lt;string | number&amp;gt; Duplicate -&amp;gt; 0 (false) Unique -&amp;gt; 1 (true) ... </summary> </entry> </feed>
